#include<iostream>
#include "coords.h"
#include<string>
#include<cmath>
#include<ostream>

using namespace std;

namespace coords {

  rect_coords::rect_coords(){
    x=0;
    y=0;
  }

  rect_coords::rect_coords(double a, double b){
    if((a >= 0)&&(b >= 0)){
    x= a;
    y= b;
      }
      else{
	cout<<"rect_coords: need xco >=0 and yco >=0 [will use Cartesian origin]."<<endl;
	x=0;
	y=0;
      }
  }

  rect_coords rect_coords::toPolar(){
    r= sqrt(pow(x,2) + pow(y,2));
    t=  atan(y/x);

  }
  
  void rect_coords::print(string rname){
    cout<<"Rectangluar coordinates of "<<rname<<": ("<<x<<", "<<y<<")"<<endl;

  }

  polar_coords::polar_coords(){
    r=0;
    t=0.523599;
  }

  void polar_coords::print(string pname){
    cout<<"Polar coordinates of "<<pname<<": ("<<r<<", "<<t<<")"<<endl;
  }

  polar_coords& polar_coords::operator=(& RC){
    r= RC.r;
    t= RC.t;
  }
/* polar_coords& polar_coords::operator=( vector<double>& vtp){
    r=vtp[0];
    t=vtp[1];
    }*/

}
